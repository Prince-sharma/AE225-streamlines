import numpy as np
from scipy.optimize import fsolve
import matplotlib.pyplot as plt

n=1000
th=np.zeros(n)
U=10.0
lambd=1.0
k=50/3

soln_psi1=np.zeros((n-1,2))

a=np.sqrt(lambd/U) #radius of cylinder
r=np.linspace(a,20,n)
r=r[1:]
num=20
psi=np.linspace(-10,10,num)
outputArray=np.zeros((n-1,2))

for j in range(num):
    for i in range(len(r)):
        def psiFunc(z):
            x=z[0]    #r
            y=z[1]    #theta
            F=np.zeros((2))
            F[0] = U*x*np.sin(y) - lambd*np.sin(y)/x - k*np.log(x) - psi[j] #- psi[j]
            F[1] = x - r[i]
            return F
        zGuess=np.array([2.5,np.pi/4 ])
        z=fsolve(psiFunc,zGuess)
        soln_psi1[i,0]=z[0]    #this is r
        soln_psi1[i,1]=z[1]    #this is theta
        zGuess[0]=soln_psi1[i,0]  #refine zGuess
        zGuess[1]=soln_psi1[i,1]  #refine zGuess
        outputArray[i,0]=soln_psi1[i,0]*np.cos(soln_psi1[i,1])
        outputArray[i,1]=soln_psi1[i,0]*np.sin(soln_psi1[i,1])
    plt.plot(outputArray[:,0],outputArray[:,1], 'k', linewidth = 0.5)
    plt.plot(-outputArray[:,0],outputArray[:,1], 'k', linewidth=0.5)
plt.xlim(-10,10)
