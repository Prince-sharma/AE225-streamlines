import numpy as np
from scipy.optimize import fsolve
import matplotlib.pyplot as plt

n=1000
th=np.zeros(n)
U=10.0                                       #U=10.0
lambd=1.0                                    #lambd=1.0   
k=50/3                                       #k=50/3

soln_psi1=np.zeros((n-1,2))

a=np.sqrt(lambd/U) #radius of cylinder
print(a)
r=np.linspace(a,20,n)
r=r[1:]
nPsi_polar=12
psi_polar=np.linspace(-2,10,nPsi_polar)
psi_cartesian1=np.linspace(-20,-2)
psi_cartesian2=np.linspace(12,15)
psi_cartesian=np.append(psi_cartesian1,psi_cartesian2 )
nPhi=10
phi=np.linspace(-50,50,nPhi)
outputArray=np.zeros((n-1,2))
zeros=np.zeros(2)

for j in range(nPsi):
    for i in range(len(r)):
        def psiFunc(z):
            x=z[0]    #r
            y=z[1]    #theta
            F=np.zeros((2))
            
            F[0] = U*x*np.sin(y) - lambd*np.sin(y)/x - k*np.log(x) -12 #- psi[j]    psi=7.8 stagnation
            F[1] = x - r[i]
            return F
        zGuess=np.array([2.5,np.pi/4 ])
        z=fsolve(psiFunc,zGuess)
        soln_psi1[i,0]=z[0]       #this is r
        soln_psi1[i,1]=z[1]       #this is theta
        zGuess[0]=soln_psi1[i,0]  #refine zGuess
        zGuess[1]=soln_psi1[i,1]  #refine zGuess
        outputArray[i,0]=soln_psi1[i,0]*np.cos(soln_psi1[i,1])
        outputArray[i,1]=soln_psi1[i,0]*np.sin(soln_psi1[i,1])
    plt.plot(outputArray[:,0],outputArray[:,1], 'k', linewidth = 0.5)
    plt.plot(-outputArray[:,0],outputArray[:,1], 'k', linewidth=0.5)


#for j in range(nPhi):
#    for i in range(len(r)):
#        def psiFunc(z):
#            x=z[0]    #r
#            y=z[1]    #theta
#            F=np.zeros((2))
#            F[0] = U*x*np.cos(y) + lambd*np.cos(y)/x + k*y - phi[j] #- psi[j]    psi=7.8 stagnation
#            F[1] = x - r[i]
#            return F
#        zGuess=np.array([2.5,np.pi/4 ])
#        z=fsolve(psiFunc,zGuess)
#        soln_psi1[i,0]=z[0]       #this is r
#        soln_psi1[i,1]=z[1]       #this is theta
#        zGuess[0]=soln_psi1[i,0]  #refine zGuess
#        zGuess[1]=soln_psi1[i,1]  #refine zGuess
#        outputArray[i,0]=soln_psi1[i,0]*np.cos(soln_psi1[i,1])
#        outputArray[i,1]=soln_psi1[i,0]*np.sin(soln_psi1[i,1])
#    plt.plot(outputArray[:,0],outputArray[:,1], 'k', linewidth = 0.5)
#    plt.plot(-outputArray[:,0],outputArray[:,1], 'k', linewidth=0.5)


plt.xlim(-20,20)
plt.ylim(-10,10)
plt.gca().set_aspect('equal')
radius=a
theta=np.linspace(0,2*np.pi,100)
plt.plot(radius*np.cos(theta), radius*np.sin(theta), 'r')
