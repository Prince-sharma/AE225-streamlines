import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import fsolve

U=10 #m/s freestream velocity     #U=10.0
m=0.5 #source and sink strength     #m=0.5
lambd=1.0 #lambd=lambda=2ma         #lambd=2.0
k=16.66 #vortex strength             #k=12.0   
n=1000                              #n=1000
x_axis=np.linspace(0,10,n)
a=np.sqrt(lambd/U)
print('a = ')
print(a)


soln_psi1=np.zeros((n,2))
soln_psi2=np.zeros((n,2))
soln_phi1=np.zeros((n,2))
soln_phi2=np.zeros((n,2))
num=25
psi=np.linspace(-30,15,num)
phi=np.linspace(0.1,10,num)
for j in range(num):
    for i in range(n):
        def psiFunc(z):
            x=z[0]
            y=z[1]
            F=np.zeros((2))
            #F[0]=x*x + y*y - psi[j]
            F[0] = U*y - lambd*y/(x*x + y*y) - 0.5*k*np.log(x*x + y*y) - psi[j] #- psi[j]
            F[1]=x - x_axis[i]
            return F
#        if
        
        zGuess=np.array([0.0,2.5 ])
        z=fsolve(psiFunc,zGuess)
        soln_psi1[i,0]=z[0]
        soln_psi1[i,1]=z[1]
        zGuess[0]=soln_psi1[i,0]
        zGuess[1]=soln_psi1[i,1]
#        if x_axis[i]==0:
#            pass
#        else:
#            slope=np.abs((soln_psi1[i,1]-soln_psi1[i-1])/(x_axis[i]-x_axis[i-1]))
#            
#        for j in range(50):
#            if slope>15:
#                x_axis[i+j]=x_axis[i-j]
            
#        def phiFunc(z):
#            a=z[0]
#            b=z[1]
#            F1=np.zeros((2))
#            F1[0]=a-np.sin(a)-b #func for velocity potential 
#            F1[1]=a-x_axis[i]
#            return F1
#        zGuess1=np.array([0.0,0.0])
#        z1=fsolve(phiFunc,zGuess1)
#        soln_phi[i,0]=z1[0]
#        soln_phi[i,1]=z1[1]
    plt.plot(x_axis,soln_psi1[:,1],'-', c='black', markersize=0.1, linewidth=0.5)
    plt.plot(-x_axis,soln_psi1[:,1],'-', c='black', markersize=0.1, linewidth=0.5)
#    plt.plot(soln_phi[:,0],soln_phi[:,1],'.', c='red', markersize=0.05)

#plt.Circle((0,0), a,'r')
#plt.gca().set_aspect('equal')
#plt.xlim(-2.5,2.5)
#plt.ylim(-1,2) 
plt.xlim(-2,5)
r=a
th=np.linspace(0,2*np.pi,100)
plt.plot(r*np.cos(th), r*np.sin(th))
